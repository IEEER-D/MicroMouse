
Motors Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000001a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acf  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000714  00000000  00000000  00000d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008c1  00000000  00000000  0000149f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000650b  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e6  00000000  00000000  000083df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000088c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000021f0  00000000  00000000  00008955  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	29 c0       	rjmp	.+82     	; 0x54 <__ctors_end>
   2:	00 00       	nop
   4:	38 c0       	rjmp	.+112    	; 0x76 <__vector_1>
   6:	00 00       	nop
   8:	4d c0       	rjmp	.+154    	; 0xa4 <__vector_2>
   a:	00 00       	nop
   c:	33 c0       	rjmp	.+102    	; 0x74 <__bad_interrupt>
   e:	00 00       	nop
  10:	31 c0       	rjmp	.+98     	; 0x74 <__bad_interrupt>
  12:	00 00       	nop
  14:	2f c0       	rjmp	.+94     	; 0x74 <__bad_interrupt>
  16:	00 00       	nop
  18:	2d c0       	rjmp	.+90     	; 0x74 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	2b c0       	rjmp	.+86     	; 0x74 <__bad_interrupt>
  1e:	00 00       	nop
  20:	29 c0       	rjmp	.+82     	; 0x74 <__bad_interrupt>
  22:	00 00       	nop
  24:	27 c0       	rjmp	.+78     	; 0x74 <__bad_interrupt>
  26:	00 00       	nop
  28:	25 c0       	rjmp	.+74     	; 0x74 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	23 c0       	rjmp	.+70     	; 0x74 <__bad_interrupt>
  2e:	00 00       	nop
  30:	21 c0       	rjmp	.+66     	; 0x74 <__bad_interrupt>
  32:	00 00       	nop
  34:	1f c0       	rjmp	.+62     	; 0x74 <__bad_interrupt>
  36:	00 00       	nop
  38:	1d c0       	rjmp	.+58     	; 0x74 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	1b c0       	rjmp	.+54     	; 0x74 <__bad_interrupt>
  3e:	00 00       	nop
  40:	19 c0       	rjmp	.+50     	; 0x74 <__bad_interrupt>
  42:	00 00       	nop
  44:	17 c0       	rjmp	.+46     	; 0x74 <__bad_interrupt>
  46:	00 00       	nop
  48:	15 c0       	rjmp	.+42     	; 0x74 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	13 c0       	rjmp	.+38     	; 0x74 <__bad_interrupt>
  4e:	00 00       	nop
  50:	11 c0       	rjmp	.+34     	; 0x74 <__bad_interrupt>
	...

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	55 d0       	rcall	.+170    	; 0x11c <main>
  72:	5a c0       	rjmp	.+180    	; 0x128 <_exit>

00000074 <__bad_interrupt>:
  74:	c5 cf       	rjmp	.-118    	; 0x0 <__vectors>

00000076 <__vector_1>:
	float cycles = Slots/40;
	float Distance = cycles*2*3*22/7;
	return Distance;
}

ISR(INT0_vect){
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	8f 93       	push	r24
  82:	9f 93       	push	r25
	Right_Counter++;
  84:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Right_Counter>
  88:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Right_Counter+0x1>
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Right_Counter+0x1>
  92:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Right_Counter>
}
  96:	9f 91       	pop	r25
  98:	8f 91       	pop	r24
  9a:	0f 90       	pop	r0
  9c:	0f be       	out	0x3f, r0	; 63
  9e:	0f 90       	pop	r0
  a0:	1f 90       	pop	r1
  a2:	18 95       	reti

000000a4 <__vector_2>:

ISR(INT1_vect){
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	Left_Counter++;
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <Motor_init>:
	*/
	OCR0 = speed;
}

void Stop_Motor(){
	PORTB &= ~ ((1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB4));
  d2:	87 b3       	in	r24, 0x17	; 23
  d4:	87 61       	ori	r24, 0x17	; 23
  d6:	87 bb       	out	0x17, r24	; 23
  d8:	08 95       	ret

000000da <PWM_init>:
  da:	83 b7       	in	r24, 0x33	; 51
  dc:	88 64       	ori	r24, 0x48	; 72
  de:	83 bf       	out	0x33, r24	; 51
  e0:	83 b7       	in	r24, 0x33	; 51
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	83 bf       	out	0x33, r24	; 51
  e6:	83 b7       	in	r24, 0x33	; 51
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	83 bf       	out	0x33, r24	; 51
  ec:	bb 9a       	sbi	0x17, 3	; 23
  ee:	c3 9a       	sbi	0x18, 3	; 24
  f0:	8f b5       	in	r24, 0x2f	; 47
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8f bd       	out	0x2f, r24	; 47
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	80 68       	ori	r24, 0x80	; 128
  fa:	8f bd       	out	0x2f, r24	; 47
  fc:	8e b5       	in	r24, 0x2e	; 46
  fe:	81 60       	ori	r24, 0x01	; 1
 100:	8e bd       	out	0x2e, r24	; 46
 102:	8d 9a       	sbi	0x11, 5	; 17
 104:	95 9a       	sbi	0x12, 5	; 18
 106:	08 95       	ret

00000108 <Move_Forword>:
	}
	Stop_Motor();
}
void Move_Forword(uint8_t speed_L,uint8_t speed_R ){
	//1001      0 1 2 4
	PORTB = ((1<<PB0)|(1<<PB4));
 108:	91 e1       	ldi	r25, 0x11	; 17
 10a:	98 bb       	out	0x18, r25	; 24
	PORTB &= ~ ((1<<PB1)|(1<<PB2));
 10c:	98 b3       	in	r25, 0x18	; 24
 10e:	99 7f       	andi	r25, 0xF9	; 249
 110:	98 bb       	out	0x18, r25	; 24
}
void set_Left_Speed(uint8_t speed){
	/*
	speed in range 0 -> 255
	*/
	OCR1A = speed;
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	9b bd       	out	0x2b, r25	; 43
 116:	8a bd       	out	0x2a, r24	; 42
}
void set_Right_Speed(uint8_t speed){
	/*
	speed in range 0 -> 255
	*/
	OCR0 = speed;
 118:	6c bf       	out	0x3c, r22	; 60
 11a:	08 95       	ret

0000011c <main>:


extern volatile uint16_t  Right_Counter;
extern volatile uint16_t Left_Counter;
int main(void){
	PWM_init();
 11c:	de df       	rcall	.-68     	; 0xda <PWM_init>
	Motor_init();
 11e:	d9 df       	rcall	.-78     	; 0xd2 <Motor_init>
 120:	68 ec       	ldi	r22, 0xC8	; 200
	
	
	while(1){
		
		Move_Forword(200,200);
 122:	88 ec       	ldi	r24, 0xC8	; 200
 124:	f1 df       	rcall	.-30     	; 0x108 <Move_Forword>
 126:	fc cf       	rjmp	.-8      	; 0x120 <main+0x4>

00000128 <_exit>:
 128:	f8 94       	cli

0000012a <__stop_program>:
 12a:	ff cf       	rjmp	.-2      	; 0x12a <__stop_program>
